# The sample configuration file for dynners.
# TOML is used as the syntax - see its documentation for more information.
#
# General settings that apply to the daemon itself.
[general]
    # How long it should take, in seconds, before the daemon re-checks &
    # updates the DDNS records. Note that if the addresses are unchanged,
    # the DDNS service will not be consulted.
    # This must be specified.
    update_rate = 300

    # The shell which will be used by the "exec" IP configuration method,
    # By default this is going to be Bash.
    shell = "/bin/bash"

    # The user agent which will be used by all HTTP requests.
    # You should append your device model to the user agent string.
    user_agent = "github.com/hch12907/dynners 0.1.0"

# A list of IP addresses which will be used to update the DDNS records.
#
# You must specify the IP version for each of the entries.
#
# The supported methods for configuring those IP addresses are:
#  - "exec"
#  - "interface"
#  - "http"
#
# Those IP addresses are named (below, "name1" to "name4" are used). The
# names can be whatever you want as long as they are UTF-8, even `[ip."世界"]`
# is perfectly reasonable. However, non-alphanumeric identifiers must be
# surrounded by quotes.
#
# Each of the IP addresses have an internal error flag that is set when the
# method fails (e.g. HTTP client returned status code 500, or the IP obtained
# from an interface failed to match the netmask).
[ip.name1]
    version = 6
    method = "interface"

    # For the "interface" service, the available configuration options are:
    # - iface: the IP address of this interface will be used.
    # - matches: only use this IP address if it matches the netmask.
    #            Defaults to "::/0" or "0/0".
    #            Note that non-CIDR notation can also be used: "::/::ffff"
    #            matches all IPv6 addresses ending with 0000.
    iface = "wlan0"
    matches = "2000::/3"

[ip.name2]
    version = 4
    method = "exec"

    # For the "exec" service, the available configuration options are:
    # - command: the command which will be executed. The stdout is expected
    #            to be an IP address.
    command = "natpmpc | grep 'Public IP' | cut -d ' ' -f5"

[ip.name3]
    version = 6
    method = "http"

    # For the "http" service, the available configuration options are:
    #  - url: connect to this URL and send a HTTP GET request to obtain the
    #         external IP address.
    #  - regex: run this regular expression on the HTTP response, the first
    #           capture group will be the IP address.
    #           (NOTE: only available when compiled with the feature "regex")
    url = "https://api6.ipify.org/"
    regex = "(.*)"

[ip.name4]
    version = 4
    method = "http"

    url = "https://api4.ipify.org/"
    regex = "(.*)"

# Configuration of DDNS services.
#
# Just like IP addresses, the service entries are named.
#
# Within each DDNS entry, the "service" and "ip" option are provided. Multiple
# IP addresses are allowed in those two options, if the first IP address is
# unusable (an error flag is set) then the next one will be attempted.
#
# NOTE that some services require you to pre-create DNS records on their own   
# website, notably Porkbun (the edit operation will succeed, but no actual
# changes are made). Best to create your A and/or AAAA records before starting
# the daemon.
#
# The configuration options will be provided below. 
# 
[ddns."cloudflare-example"]
    service = "cloudflare-v4"
    ip = ["name1", "name2", "name3"]
    token = ""
    ttl = 300
    proxied = true
    domains = ["www.example.com", "subdomain.example.com"]

[ddns."no-ip-example"]
    service = "no-ip"
    ip = ["name1", "name2"]
    username = "your.email@example.com"
    password = ""
    domains = "example.com"

[ddns."dns-o-matic-example"]
    service = "dns-o-matic"
    ip = ["name1", "name2"]
    username = "your-username"
    password = ""
    domains = "example.com"

[ddns."duck-dns-example"]
    service = "duckdns"
    ip = ["name1", "name2"]
    token = "your-token"
    domains = "example.org"

[ddns."dynu-example"]
    service = "dynu"
    ip = ["name1", "name2"]
    username = "your-username"
    password = ""
    domains = "example.com"

[ddns."ipv64-example"]
    service = "ipv64"
    ip = ["name1", "name2"]
    username = "anything-goes-here"
    password = ""
    domains = "example.com"

[ddns."porkbun-example"]
    service = "porkbun"
    ip = ["name1", "name2"]
    secret_api_key = "sk1_key"
    api_key = "pk1_key"
    domains = ["example.com"]

[ddns."selfhost-de-example"]
    service = "selfhost"
    ip = ["name1", "name2"]
    username = "dyn-account"
    password = ""
    domains = "example.com"

[ddns."hello, this is a dummy!"]
    service = "dummy"
    ip = ["name1", "name2"]
    domains = "example.dummy"
